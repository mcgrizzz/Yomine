[changelog]
# changelog header
header = """
# What's Changed

"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% for group, commits in commits | group_by(attribute="group") %}
### {{ group | striptags | trim | upper_first }}
{% for commit in commits %}
- {% if commit.scope %}**{{commit.scope}}**: {% endif %}"{{ commit.message | upper_first }}"{% if "in [#" in commit.message and commit.author.name %} by [@{{ commit.author.name }}](https://github.com/{{ commit.author.name }}){% endif %}
{% if commit.body %}
{{ commit.body | indent(width=2) }}
{% endif %}

{% endfor %}
{% endfor %}
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# postprocessors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/shigeokitamura/yomine/issues/${2}))"},
  # Extract PR references - these will show usernames
  { pattern = '\(#([0-9]+)\)', replace = " in [#${1}](https://github.com/shigeokitamura/yomine/pull/${1})"},
  { pattern = 'Merge pull request #([0-9]+)', replace = "Merge PR [#${1}](https://github.com/shigeokitamura/yomine/pull/${1})"},
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
  # New features and additions
  { message = "^feat", group = "New Features" },
  { message = "^Add", group = "New Features" },
  { message = "^Basic", group = "New Features" },
  
  # Bug fixes
  { message = "^fix", group = "Bug Fixes" },
  { message = "^Fix", group = "Bug Fixes" },
  
  # Updates and improvements
  { message = "^Update", group = "Improvements" },
  { message = "^perf", group = "Improvements" },
  { message = "^refactor", group = "Improvements" },
  { message = "^Centralized", group = "Improvements" },
  
  # Maintenance (skip noisy maintenance commits)
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore|^ci", skip = true },
  { message = "^Clean", skip = true },
  { message = "^style", skip = true },
  { message = "^test", skip = true },
  { message = "^doc", skip = true },
  { message = "^Changelog", skip = true },
  
  # Security issues (always show these)
  { body = ".*security", group = "Security" },
  
  # Breaking changes and removals
  { message = "^Remove", group = "Breaking Changes" },
  { message = "^revert", group = "Breaking Changes" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags (none - we want to process all tags including betas)
skip_tags = ""
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
