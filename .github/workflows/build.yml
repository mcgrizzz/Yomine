name: Beta Builds

on:
  push:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: yomine-windows-x64.exe
            
          - target: x86_64-apple-darwin
            os: macos-latest
            name: yomine-macos-x64
            
          - target: aarch64-apple-darwin
            os: macos-latest
            name: yomine-macos-arm64
            
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: yomine-linux-x64
            
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-
    
    - name: Cache cargo target
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    # Linux dependencies
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev
    
    # Build the application
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    
    # Prepare artifacts
    - name: Prepare Windows artifact
      if: matrix.os == 'windows-latest'
      run: |
        copy target\${{ matrix.target }}\release\yomine.exe ${{ matrix.name }}
    
    - name: Prepare Unix artifact
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/yomine ${{ matrix.name }}
        chmod +x ${{ matrix.name }}
      # Upload artifacts for beta builds
    - name: Upload beta artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}-beta
        path: ${{ matrix.name }}
        retention-days: 30
  # Create a beta release
  create-beta-release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Display structure of downloaded files
      run: ls -la artifacts/
    
    - name: Create beta release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: beta-${{ github.sha }}
        name: Beta Build ${{ github.sha }}
        body: |
          ðŸš§ **Beta Build** - Automated build from the latest main branch
          
          **Commit:** ${{ github.sha }}
          **Built on:** ${{ github.event.head_commit.timestamp }}
          
          This is an automated beta build. Use at your own risk.
          
          ## Changes in this build:
          ${{ github.event.head_commit.message }}
        files: |
          artifacts/yomine-windows-x64.exe-beta/yomine-windows-x64.exe
          artifacts/yomine-macos-x64-beta/yomine-macos-x64
          artifacts/yomine-macos-arm64-beta/yomine-macos-arm64
          artifacts/yomine-linux-x64-beta/yomine-linux-x64
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
