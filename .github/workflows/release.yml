name: Release

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release (e.g., v0.3.0-beta.1)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always
  # Set the tag name based on trigger type
  TAG_NAME: ${{ github.event.release.tag_name || inputs.tag_name }}

jobs:
  build-and-upload:
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: yomine-${{ github.event.release.tag_name || inputs.tag_name }}-windows-x64
            archive_ext: zip
            executable_ext: .exe
            
          - target: x86_64-apple-darwin
            os: macos-latest
            name: yomine-${{ github.event.release.tag_name || inputs.tag_name }}-macos-intel-x64
            archive_ext: tar.gz
            executable_ext: ""
            
          - target: aarch64-apple-darwin
            os: macos-latest
            name: yomine-${{ github.event.release.tag_name || inputs.tag_name }}-macos-apple-arm64
            archive_ext: tar.gz
            executable_ext: ""
            
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: yomine-${{ github.event.release.tag_name || inputs.tag_name }}-linux-x64
            archive_ext: tar.gz
            executable_ext: ""
            
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-
    
    - name: Cache cargo target
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    # Linux dependencies for egui
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev
      # Build the application
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    # Generate checksums
    - name: Generate checksums
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cd target/${{ matrix.target }}/release
          sha256sum yomine.exe > yomine.exe.sha256
          cd -
        else
          cd target/${{ matrix.target }}/release
          sha256sum yomine > yomine.sha256
          cd -
        fi

    # Create archives with improved naming and checksums
    - name: Create Windows archive
      if: matrix.os == 'windows-latest'
      run: |
        copy target\${{ matrix.target }}\release\yomine.exe yomine${{ matrix.executable_ext }}
        copy target\${{ matrix.target }}\release\yomine.exe.sha256 yomine${{ matrix.executable_ext }}.sha256
        7z a ${{ matrix.name }}.${{ matrix.archive_ext }} yomine${{ matrix.executable_ext }} yomine${{ matrix.executable_ext }}.sha256

    - name: Create Unix archive
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/yomine yomine${{ matrix.executable_ext }}
        cp target/${{ matrix.target }}/release/yomine.sha256 yomine${{ matrix.executable_ext }}.sha256
        chmod +x yomine${{ matrix.executable_ext }}
        tar -czf ${{ matrix.name }}.${{ matrix.archive_ext }} yomine${{ matrix.executable_ext }} yomine${{ matrix.executable_ext }}.sha256

    # Generate archive checksums
    - name: Generate archive checksums
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          sha256sum ${{ matrix.name }}.${{ matrix.archive_ext }} > ${{ matrix.name }}.${{ matrix.archive_ext }}.sha256
        else
          sha256sum ${{ matrix.name }}.${{ matrix.archive_ext }} > ${{ matrix.name }}.${{ matrix.archive_ext }}.sha256
        fi      # Upload to release
    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.TAG_NAME }}
        files: |
          ${{ matrix.name }}.${{ matrix.archive_ext }}
          ${{ matrix.name }}.${{ matrix.archive_ext }}.sha256
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
