name: Release

on:
  release:
    types: [created]

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-upload:
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: yomine-${{ github.event.release.tag_name }}-windows-x64.exe
            
          - target: x86_64-apple-darwin
            os: macos-latest
            name: yomine-${{ github.event.release.tag_name }}-macos-x64
            
          - target: aarch64-apple-darwin
            os: macos-latest
            name: yomine-${{ github.event.release.tag_name }}-macos-arm64
            
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: yomine-${{ github.event.release.tag_name }}-linux-x64
            
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-
    
    - name: Cache cargo target
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    # Linux dependencies for egui
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev
    
    # Build the application
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    
    # Create archives
    - name: Create Windows archive
      if: matrix.os == 'windows-latest'
      run: |
        copy target\${{ matrix.target }}\release\yomine.exe yomine.exe
        7z a ${{ matrix.name }}.zip yomine.exe
    
    - name: Create Unix archive
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/yomine yomine
        chmod +x yomine
        tar -czf ${{ matrix.name }}.tar.gz yomine
    
    # Upload to release
    - name: Upload Windows release asset
      if: matrix.os == 'windows-latest'
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ matrix.name }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload Unix release asset
      if: matrix.os != 'windows-latest'
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ matrix.name }}.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
