name: Release

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release (e.g., v0.3.0-beta.1)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always
  # Set the tag name based on trigger type
  TAG_NAME: ${{ github.event.release.tag_name || inputs.tag_name }}

jobs:
  build-and-upload:
    name: Release - ${{ matrix.platform.os-name }}    
    strategy:
      matrix:
        platform:
          - os-name: Windows-x86_64
            runs-on: windows-latest
            target: x86_64-pc-windows-msvc
            name: yomine-${{ github.event.release.tag_name || inputs.tag_name }}-windows-x64.exe
            
          - os-name: Linux-x86_64
            runs-on: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: yomine-${{ github.event.release.tag_name || inputs.tag_name }}-linux-x64
            
    runs-on: ${{ matrix.platform.runs-on }}
    steps:      
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: ${{ matrix.platform.target }}
          args: "--release"
          strip: true

      # Debug: List target directory contents to see what was actually built
      - name: List target directory contents
        run: |
          echo "Contents of target directory:"
          ls -la target/ || dir target\ /s
          echo "Contents of target/${{ matrix.platform.target }}:"
          ls -la target/${{ matrix.platform.target }}/ || dir target\${{ matrix.platform.target }}\ /s
          echo "Contents of target/${{ matrix.platform.target }}/release:"
          ls -la target/${{ matrix.platform.target }}/release/ || dir target\${{ matrix.platform.target }}\release\ /s
        shell: bash      # Prepare binary for all platforms
      - name: Prepare binary (Windows)
        if: matrix.platform.runs-on == 'windows-latest'
        run: |
          copy target\${{ matrix.platform.target }}\release\yomine.exe ${{ matrix.platform.name }}
        shell: cmd

      - name: Prepare binary (Linux)
        if: matrix.platform.runs-on == 'ubuntu-latest'
        run: |
          cp target/${{ matrix.platform.target }}/release/yomine ${{ matrix.platform.name }}
          chmod +x ${{ matrix.platform.name }}
        shell: bash

      # Upload files to release
      - name: Upload binary to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: ${{ matrix.platform.name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build macOS Universal Binary (separate job)
  build-macos-universal:
    name: Release - macOS Universal
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build Intel binary
      - name: Build Intel binary
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: x86_64-apple-darwin
          args: "--release"
          strip: true

      # Build ARM64 binary  
      - name: Build ARM64 binary
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: aarch64-apple-darwin
          args: "--release"
          strip: true      # Create Universal Binary
      - name: Create Universal Binary
        run: |          # Create universal binary using lipo
          lipo -create \
            target/x86_64-apple-darwin/release/yomine \
            target/aarch64-apple-darwin/release/yomine \
            -output yomine-${{ env.TAG_NAME }}-macos-universal
          
          # Make it executable
          chmod +x yomine-${{ env.TAG_NAME }}-macos-universal
          
          # Verify the universal binary
          echo "Universal binary architecture info:"
          lipo -info yomine-${{ env.TAG_NAME }}-macos-universal
          
          # Show file size
          echo "Universal binary size:"
          ls -lh yomine-${{ env.TAG_NAME }}-macos-universal
          
          # Verify it's properly executable
          echo "File permissions:"
          ls -la yomine-${{ env.TAG_NAME }}-macos-universal
          
          # Check file type
          echo "File type:"
          file yomine-${{ env.TAG_NAME }}-macos-universal      # Create macOS App Bundle
      - name: Create macOS App Bundle
        run: |
          # Create the app bundle structure
          APP_NAME="Yomine.app"
          APP_BUNDLE_PATH="$APP_NAME"
          
          echo "Creating app bundle structure..."
          mkdir -p "$APP_BUNDLE_PATH/Contents/MacOS"
          mkdir -p "$APP_BUNDLE_PATH/Contents/Resources"
          
          # Copy the binary into the app bundle
          cp yomine-${{ env.TAG_NAME }}-macos-universal "$APP_BUNDLE_PATH/Contents/MacOS/yomine"
          chmod +x "$APP_BUNDLE_PATH/Contents/MacOS/yomine"
          
          # Create Info.plist file
          cat > "$APP_BUNDLE_PATH/Contents/Info.plist" << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>yomine</string>
              <key>CFBundleIdentifier</key>
              <string>com.yomine.app</string>
              <key>CFBundleName</key>
              <string>Yomine</string>
              <key>CFBundleDisplayName</key>
              <string>Yomine</string>
              <key>CFBundleVersion</key>
              <string>${{ env.TAG_NAME }}</string>
              <key>CFBundleShortVersionString</key>
              <string>${{ env.TAG_NAME }}</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleSignature</key>
              <string>????</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.14</string>
              <key>NSHighResolutionCapable</key>
              <true/>
              <key>NSRequiresAquaSystemAppearance</key>
              <false/>
              <key>LSApplicationCategoryType</key>
              <string>public.app-category.productivity</string>
          </dict>
          </plist>
          EOF
          
          # Verify the app bundle structure
          echo "App bundle structure:"
          find "$APP_BUNDLE_PATH" -type f -exec ls -la {} \;
          
          echo "App bundle created successfully!"
        shell: bash

      # Ad-hoc Code Signing for App Bundle
      - name: Ad-hoc Code Sign App Bundle
        run: |
          APP_NAME="Yomine.app"
          
          # First sign the binary inside the app bundle
          codesign --force --sign - --options runtime --timestamp "$APP_NAME/Contents/MacOS/yomine"
          
          # Then sign the entire app bundle
          codesign --force --sign - --options runtime --timestamp "$APP_NAME"
          
          # Verify the signing
          echo "Verifying app bundle code signature:"
          codesign --verify --verbose "$APP_NAME"
          
          # Display signature info
          echo "App bundle code signature details:"
          codesign --display --verbose "$APP_NAME"
          
          # Test that the app bundle is properly formed
          echo "Testing app bundle executable:"
          spctl --assess --type execute --verbose "$APP_NAME" || echo "App bundle assessment completed"
          
          echo "App bundle successfully ad-hoc signed!"
        shell: bash      # Package and upload App Bundle
      - name: Package App Bundle for release
        run: |
          # Create a zip archive of the App Bundle for distribution
          zip -r "yomine-${{ env.TAG_NAME }}-macos-universal.app.zip" "Yomine.app"
          
          # Also create a tar.gz for alternative download
          tar -czf "yomine-${{ env.TAG_NAME }}-macos-universal.app.tar.gz" "Yomine.app"
          
          # Verify the packages
          echo "Created App Bundle packages:"
          ls -lh yomine-${{ env.TAG_NAME }}-macos-universal.app.*
          
          # For backwards compatibility, also keep the raw universal binary
          echo "Also providing raw universal binary for CLI users"
        shell: bash

      - name: Upload macOS App Bundle to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: |
            yomine-${{ env.TAG_NAME }}-macos-universal.app.zip
            yomine-${{ env.TAG_NAME }}-macos-universal.app.tar.gz
            yomine-${{ env.TAG_NAME }}-macos-universal
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Create consolidated checksum file (runs after all binaries are uploaded)
  create-checksums:
    needs: [build-and-upload, build-macos-universal]
    runs-on: ubuntu-latest
    
    steps:
      - name: Download release assets
        uses: robinraju/release-downloader@v1.11
        with:        
          repository: ${{ github.repository }}
          tag: ${{ env.TAG_NAME }}
          fileName: "yomine-*"
          out-file-path: "downloads"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate consolidated checksums
        run: |
          cd downloads
          # Generate checksums for all downloaded files
          sha256sum yomine-* > ../SHA256SUMS.txt
          echo "Generated checksums:"
          cat ../SHA256SUMS.txt
          
          # Create a detailed checksums file with descriptions
          cat > ../SHA256SUMS-detailed.txt << 'EOF'
          # SHA256 Checksums for Yomine Release
          # 
          # File descriptions:
          # - *-windows-x86_64.exe: Windows 64-bit executable
          # - *-linux-x86_64: Linux 64-bit executable  
          # - *-macos-universal: macOS universal binary (CLI)
          # - *-macos-universal.app.zip: macOS App Bundle (recommended for GUI)
          # - *-macos-universal.app.tar.gz: macOS App Bundle (alternative format)
          #
          # For macOS users: Download the .app.zip file for double-click execution
          # For CLI users: Download the raw universal binary
          
          EOF
          cat ../SHA256SUMS.txt >> ../SHA256SUMS-detailed.txt        shell: bash

      - name: Upload checksums to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: |
            SHA256SUMS.txt
            SHA256SUMS-detailed.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
