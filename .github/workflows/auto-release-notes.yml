name: Auto Release Notes

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  generate-release-notes:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for git-cliff

    - name: Generate Changelog
      uses: orhun/git-cliff-action@v4
      id: git-cliff
      with:
        config: cliff.toml
        args: --verbose
      env:
        OUTPUT: CHANGES.md      
    - name: Update Release Notes
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Get the current release
          const { data: release } = await github.rest.repos.getRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: context.payload.release.id
          });
          
          // Read the generated changelog
          let changelog = '';
          try {
            changelog = fs.readFileSync('CHANGES.md', 'utf8');
            console.log('Generated changelog:', changelog);
          } catch (error) {
            console.log('Could not read CHANGES.md:', error.message);
            changelog = '## What\'s Changed\n\nChangelog generation failed. Please check the git-cliff configuration.';
          }
          
          // Generate GitHub's native release notes to get contributors with profile pictures
          let githubNotes = '';
          try {
            const { data: generatedNotes } = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: release.tag_name,
              target_commitish: release.target_commitish || 'main'
            });
            githubNotes = generatedNotes.body;
            console.log('GitHub generated notes:', githubNotes);
          } catch (error) {
            console.log('Could not generate GitHub release notes:', error.message);
          }
          
          // Extract contributors section from GitHub's generated notes
          let contributorsSection = '';
          let fullChangelogSection = '';
          
          if (githubNotes) {
            // Extract "New Contributors" section
            const newContributorsMatch = githubNotes.match(/## New Contributors\n([\s\S]*?)(?=\n## |$)/);
            if (newContributorsMatch) {
              contributorsSection = '## New Contributors\n' + newContributorsMatch[1].trim();
            }
            
            // Extract "Full Changelog" section
            const fullChangelogMatch = githubNotes.match(/\*\*Full Changelog\*\*: .*/);
            if (fullChangelogMatch) {
              fullChangelogSection = fullChangelogMatch[0];
            }
          }
          
          // Build release body
          let releaseBody = '';
          
          // Add beta warning if this is a pre-release
          if (release.prerelease) {
            releaseBody += "**This is a beta release**\n\n";
            releaseBody += "This is a pre-release version intended for testing and feedback. It may contain bugs and is not recommended for the average user.\n\n";
            releaseBody += "Please report any issues you encounter to help us improve the final release.\n\n";
            releaseBody += "---\n\n";
          }
          
          // Add the changelog content
          releaseBody += changelog;
          
          // Add download information
          releaseBody += "\n\n## Downloads\n\n";
          releaseBody += "This release includes bare binaries for the following platforms:\n\n";
          releaseBody += "| Platform | Architecture | Binary File |\n";
          releaseBody += "|----------|--------------|-------------|\n";
          releaseBody += `| Windows | x64 | \`yomine.exe\` |\n`;
          releaseBody += `| macOS (Intel) | x64 | \`yomine-macos-intel\` |\n`;
          releaseBody += `| macOS (Apple Silicon) | ARM64 | \`yomine-macos-apple\` |\n`;          releaseBody += `| Linux | x64 | \`yomine-linux\` |\n\n`;
          releaseBody += "**Installation:**\n";
          releaseBody += "- **Windows**: Download `yomine.exe` and run directly\n";
          releaseBody += "- **macOS/Linux**: Download the binary for your platform, make it executable (`chmod +x yomine-*`), then run\n\n";
          releaseBody += "**Verification:** SHA256 checksums are available in `SHA256SUMS.txt`\n\n";
          
          // Update the release with generated notes
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: context.payload.release.id,
            body: releaseBody
          });
